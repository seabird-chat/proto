syntax = "proto3";

option go_package = ".;pb";

package seabird;

import "common.proto";

// Base objects are split into two pieces - their identifier and info
// components. The info objects embed the identifier to make them easier to send
// in responses.

message Service {
  string id = 1;
}

message ServiceInfo {
  Service service = 1;
  string type = 2;
}

message User {
  string service_id = 1;
  string user_id = 2;
}

message UserInfo {
  User user = 1;
  string name = 2;
}

message Channel {
  string service_id = 1;
  string channel_id = 2;
}

message ChannelInfo {
  Channel channel = 1;
  string name = 2;
  string topic = 3;
}

// Where a message came from. Note that UserInfo is used rather than User so any
// clients can have access to the name as well. This may change in the future.

message ChannelSource {
  UserInfo sender = 1;
  Channel channel = 2;
}

// Events

message MessageEvent {
  ChannelSource source = 1;
  string text = 2;
}

message PrivateMessageEvent {
  User source = 1;
  string text = 2;
}

message MentionEvent {
  ChannelSource source = 1;
  string text = 2;
}

message CommandEvent {
  ChannelSource source = 1;
  string command = 2;
  string arg = 3;
}

message Event {
  oneof inner {
    MessageEvent text = 1;
    PrivateMessageEvent private_message = 2;
    MentionEvent mention = 3;
    CommandEvent command = 4;
  }
}

// Request and response objects

message StreamEventsRequest {
  common.Identity identity = 1;

  // NOTE: help is a reserved command and cannot be registered by plugins.
  map<string, CommandMetadata> commands = 2;
}

message CommandMetadata {
  string name = 1;
  string short_help = 2;
  string full_help = 3;
}

message SendMessageRequest {
  common.Identity identity = 1;

  Channel channel = 2;
  string message = 3;
}

message SendMessageResponse {}

message SendPrivateMessageRequest {
  common.Identity identity = 1;

  User user = 2;
  string message = 3;
}

message SendPrivateMessageResponse {}

message JoinChannelRequest {
  common.Identity identity = 1;

  string server_id = 2;
  string channel_name = 3;
}

message JoinChannelResponse {}

message LeaveChannelRequest {
  common.Identity identity = 1;

  Channel channel = 2;
  string exit_message = 3;
}

message LeaveChannelResponse {}

message ListServicesRequest {
  common.Identity identity = 1;
}

message ListServicesResponse {
  repeated Service service = 1;
}

message ListChannelsRequest {
  common.Identity identity = 1;

  Service service = 2;
}

message ListChannelsResponse {
  repeated Channel channels = 1;
}

message ChannelInfoRequest {
  common.Identity identity = 1;

  Channel channel = 2;
}

message ChannelInfoResponse {
  ChannelInfo info = 1;
}

message SetChannelTopicRequest {
  common.Identity identity = 1;

  Channel channel = 2;
  string topic = 3;
}

message SetChannelTopicResponse {}

message CoreInfoRequest {
  common.Identity identity = 1;
}

message CoreInfoResponse {
  string current_nick = 1;
  int64 startup_timestamp = 2;
}

service Seabird {
  rpc StreamEvents(StreamEventsRequest) returns (stream Event);

  // Chat actions
  rpc SendMessage(SendMessageRequest) returns (SendMessageResponse);
  rpc SendPrivateMessage(SendPrivateMessageRequest) returns (SendPrivateMessageResponse);
  rpc JoinChannel(JoinChannelRequest) returns (JoinChannelResponse);
  rpc LeaveChannel(LeaveChannelRequest) returns (LeaveChannelResponse);

  // Chat service introspection
  rpc ListServices(ListServicesRequest) returns (ListServicesResponse);

  // Chat connection introspection
  rpc ListChannels(ListChannelsRequest) returns (ListChannelsResponse);
  rpc GetChannelInfo(ChannelInfoRequest) returns (ChannelInfoResponse);
  rpc SetChannelTopic(SetChannelTopicRequest) returns (SetChannelTopicResponse);

  // Seabird introspection
  rpc GetCoreInfo(CoreInfoRequest) returns (CoreInfoResponse);
}
