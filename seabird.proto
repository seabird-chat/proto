syntax = "proto3";

option go_package = ".;pb";

package seabird;

import "common.proto";

message StreamEventsRequest {
  common.Identity identity = 1;

  map<string, CommandMetadata> commands = 2;
}

message CommandMetadata {
  string name = 1;
  string short_help = 2;
  string full_help = 3;
}

message SendMessageRequest {
  common.Identity identity = 1;

  string destination_id = 2;
  string text = 3;
}

message SendMessageResponse {}

message ListServicesRequest {
  common.Identity identity = 1;
}

message ListServicesResponse {
  repeated common.Service services = 1;
}

message ListChannelsRequest {
  common.Identity identity = 1;
  string service_id = 2;
}

message ListChannelsResponse {
  repeated common.Channel channels = 1;
}

message ChannelInfoRequest {
  common.Identity identity = 1;

  string channel_id = 2;
}

message ChannelInfoResponse {
  string id = 1;
  string name = 2;
  string topic = 3;
  repeated common.User users = 4;
}

message SetChannelTopicRequest {
  common.Identity identity = 1;

  string channel_id = 2;
  string topic = 3;
}

message SetChannelTopicResponse {}

message JoinChannelRequest {
  common.Identity identity = 1;

  string server_id = 2;
  string channel_name = 3;
}

message JoinChannelResponse {}

message LeaveChannelRequest {
  common.Identity identity = 1;

  string channel_id = 2;
  string exit_message = 3;
}

message LeaveChannelResponse {}

message ListStreamsRequest {
  common.Identity identity = 1;
}

message ListStreamsResponse {
  repeated string stream_ids = 1;
}

message StreamInfoRequest {
  common.Identity identity = 1;

  string stream_id = 2;
}

message StreamInfoResponse {
  string id = 1;
  string tag = 2;

  map<string, CommandMetadata> commands = 3;

  string remote_address = 4;
  int64 connection_timestamp = 5;
}

message CoreInfoRequest {
  common.Identity identity = 1;
}

message CoreInfoResponse {
  string current_nick = 1;
  int64 startup_timestamp = 2;
}

service Seabird {
  rpc StreamEvents(StreamEventsRequest) returns (stream common.Event);

  // Chat actions
  rpc SendMessage(SendMessageRequest) returns (SendMessageResponse);
  rpc JoinChannel(JoinChannelRequest) returns (JoinChannelResponse);
  rpc LeaveChannel(LeaveChannelRequest) returns (LeaveChannelResponse);

  // Chat connection introspection
  rpc ListChannels(ListChannelsRequest) returns (ListChannelsResponse);
  rpc GetChannelInfo(ChannelInfoRequest) returns (ChannelInfoResponse);
  rpc SetChannelTopic(SetChannelTopicRequest) returns (SetChannelTopicResponse);

  // Seabird introspection
  rpc ListStreams(ListStreamsRequest) returns (ListStreamsResponse);
  rpc GetStreamInfo(StreamInfoRequest) returns (StreamInfoResponse);
  rpc GetCoreInfo(CoreInfoRequest) returns (CoreInfoResponse);
}
