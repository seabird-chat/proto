syntax = "proto3";

option go_package = ".;pb";

package seabird;

import "common.proto";

// Note that the IDs exposed by the Backend, User, and Channel are opaque IDs
// which seabird-core will handle and route to the correct backend.

message Event {
  oneof inner {
    common.MessageEvent message = 1;
    common.PrivateMessageEvent private_message = 2;
    common.MentionEvent mention = 3;
    common.CommandEvent command = 4;
    SendMessageRequest core_message = 5;
    SendPrivateMessageRequest core_private_message = 6;
  }
}

// Request and response objects

message StreamEventsRequest {
  // A registry of commands this plugin responds to. A plugin MUST register all
  // commands it responds to in order to receive those events. The
  // CommandMetadata's name MUST match the map key, or an error will be
  // returned.
  //
  // NOTE: help is a reserved command and cannot be registered by plugins.
  map<string, CommandMetadata> commands = 1;
}

// CommandMetadata groups together a command's name along with short in-line
// help and the full private help.
//
// An example for the "help" command might be a name of "help", a short_help of
// "<command>" and an long help of "With no arguments, lists all available
// commands. With an argument, display the long help for an item."
message CommandMetadata {
  string name = 1;
  string short_help = 2;
  string full_help = 3;
}

// Requests a plugin can make

// Send a message to a given a channel.
message SendMessageRequest {
  string channel_id = 1;
  string text = 2;
}

message SendMessageResponse {}

// Send a private message to a given user.
message SendPrivateMessageRequest {
  string user_id = 1;
  string text = 2;
}

message SendPrivateMessageResponse {}

// Request to join a channel.
message JoinChannelRequest {
  string backend_id = 1;

  // NOTE: this channel_name is the only place name is used for an identifier -
  // all other times channels will be referred to by ID.
  string channel_name = 2;
}

message JoinChannelResponse {}

// Request to leave a channel.
message LeaveChannelRequest {
  string channel_id = 1;
  string exit_message = 2;
}

message LeaveChannelResponse {}

// Request to list all connected backends.
message ListBackendsRequest {}

message ListBackendsResponse {
  repeated common.Backend backends = 1;
}

// Get info about a specific connected backend.
message BackendInfoRequest {
  string backend_id = 1;
}

message BackendInfoResponse {
  common.Backend Backend = 1;
}

message ListChannelsRequest {
  string backend_id = 1;
}

message ListChannelsResponse {
  repeated common.Channel channels = 1;
}

message ChannelInfoRequest {
  string channel_id = 1;
}

message ChannelInfoResponse {
  common.Channel channel = 1;
}

message UpdateChannelInfoRequest {
  string channel_id = 1;
  string topic = 2;
}

message UpdateChannelInfoResponse {}

// A request for metadata about the running core instance.
message CoreInfoRequest {}

// Metadata about the running core instance.
message CoreInfoResponse {
  uint64 startup_timestamp = 1;
}

service Seabird {
  rpc StreamEvents(StreamEventsRequest) returns (stream Event);

  // Chat actions
  rpc SendMessage(SendMessageRequest) returns (SendMessageResponse);
  rpc SendPrivateMessage(SendPrivateMessageRequest) returns (SendPrivateMessageResponse);
  rpc JoinChannel(JoinChannelRequest) returns (JoinChannelResponse);
  rpc LeaveChannel(LeaveChannelRequest) returns (LeaveChannelResponse);
  rpc UpdateChannelInfo(UpdateChannelInfoRequest) returns (UpdateChannelInfoResponse);

  // Chat backend introspection
  rpc ListBackends(ListBackendsRequest) returns (ListBackendsResponse);
  rpc GetBackendInfo(BackendInfoRequest) returns (BackendInfoResponse);

  // Chat connection introspection
  rpc ListChannels(ListChannelsRequest) returns (ListChannelsResponse);
  rpc GetChannelInfo(ChannelInfoRequest) returns (ChannelInfoResponse);

  // Seabird introspection
  rpc GetCoreInfo(CoreInfoRequest) returns (CoreInfoResponse);
}
