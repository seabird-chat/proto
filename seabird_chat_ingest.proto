syntax = "proto3";

option go_package = ".;pb";

import "common.proto";

package seabird;

// Note that all of the types in this file end with ChatRequest, end with
// ChatEvent, or start with Chat to prevent namespace conflicts between the main
// seabird.proto.

message ChatUser {
  string id = 1;
  string name = 2;
}

message ChatChannel {
  string id = 1;
  string name = 2;
}

message SendMessageChatRequest {
  string channel_id = 1;
  string message = 2;
}

message SendPrivateMessageChatRequest {
  string user_id = 1;
  string message = 2;
}

message JoinChannelChatRequest {
  string channel_name = 1;
}

message LeaveChannelChatRequest {
  string channel_id = 1;
}

message SetChannelTopicChatRequest {
  string channel = 1;
  string topic = 2;
}

// Each ChatRequest has an ID (which can be attached to outgoing events - only
// the first outgoing event with this ID will be used as the reply) and an inner
// message type. Having an ID allows us to route an event back to the requestor
// without having the chat backend implement a service.
message ChatRequest {
  string id = 1;

  oneof inner {
    SendMessageChatRequest send_message = 2;
    SendPrivateMessageChatRequest send_private_message = 3;
    JoinChannelChatRequest join_channel = 4;
    LeaveChannelChatRequest leave_channel = 5;
    SetChannelTopicChatRequest set_channel_topic = 6;
  }
}

// HelloChatEvent must be the first event sent by the chat backend. If a different
// event is sent, the connection will be closed.
message HelloChatEvent {
  common.Identity identity = 1;
}

message SuccessChatEvent {}

// This is a marker event to respond to seabird-core that performing an action
// has failed. Note that an action which takes too long will also be marked as
// failed automatically. The time alotted for an action is not static and may
// change based on load.
message FailedChatEvent {
  string reason = 1;
}

message MessageChatEvent {
  ChatUser user = 1;
  ChatChannel channel = 2;
  string message = 3;
}

message PrivateMessageChatEvent {
  ChatUser user = 1;
  ChatChannel channel = 2;
  string message = 3;
}

message MentionChatEvent {
  ChatUser user = 1;
  ChatChannel channel = 2;
  string message = 3;
}

message CommandChatEvent {
  ChatUser user = 1;
  ChatChannel channel = 2;
  string command = 3;
  string arg = 4;
}

message ChannelTopicChatEvent {
  ChatChannel channel = 1;
  string topic = 2;
}

message ChannelJoinEvent {
  ChatChannel channel = 1;
}

message ChannelLeaveEvent {
  ChatChannel channel = 1;
}

// ChatEvent contains all the different event types a chat backend can emit.
// Note that these are slightly different to the seabird.Event types as channels
// here will not be mapped to UUIDs and some events are only to support the data
// that seabird-core tracks.
//
// HelloChatEvent is the only message type that is required for a chat backend
// to work.
message ChatEvent {
  string id = 1;

  oneof inner {
    // Seabird-internal event types
    HelloChatEvent hello = 2;
    SuccessChatEvent success = 3;
    FailedChatEvent failed = 4;

    // Messages from the service
    MessageChatEvent message = 5;
    PrivateMessageChatEvent private_message = 6;
    MentionChatEvent mention = 7;
    CommandChatEvent command = 8;
    ChannelTopicChatEvent topic = 9;

    // Channel changes
    ChannelJoinEvent join = 10;
    ChannelLeaveEvent leave = 11;
  }
}

// This service is exposed separately to the chat frontend. Its purpose is to
// allow multiple different chat backends to register to Core and allow plugins
// to communicate with them.
service ChatIngest {
  rpc IngestEvents(stream ChatEvent) returns (stream ChatRequest);
}
