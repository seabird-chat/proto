syntax = "proto3";

option go_package = ".;pb";

import "common.proto";

package seabird_chat_router;

message RegisterRequest {
  common.Identity identity = 1;

  string id = 2;
  repeated string supported_actions = 3;
  // TODO: decide if this is worth the weirdness to
  // save the extra RPC
  repeated string initial_channels = 4;
}

message RegisterResponse {}

message RegisterChannelsRequest {
  common.Identity identity = 1;

  // Note that "service_id" here is expected to be optional
  // as the message is coming from the service registering
  // registering the channels.
  repeated common.Channel channels = 2;
}

message RegisterChannelsResponse {}

message DeregisterChannelsRequest {
  common.Identity identity = 1;

  repeated string channel_ids = 2;
}

message DeregisterChannelsResponse {}

message StreamEventsRequest {
  common.Identity identity = 1;
}

message DispatchMessageRequest {
  common.Identity identity = 1;

  string source_channel_id = 2;
  string text = 3;
}

message DispatchMessageResponse {}

// This service is exposed separately to the chat frontend. Its purpose
// is to allow multiple different chat backends to register to Core
// and allow plugins to communicate with them.
service SeabirdChatRouter {
  rpc Register(RegisterRequest) returns (RegisterResponse);

  // Core needs to know each channel ID, so chat services must register
  // and deregister channels
  rpc RegisterChannels(RegisterChannelRequest) returns (RegisterChannelResponse);
  rpc DeregisterChannels(DeregisterChannelRequest) returns (DeregisterChannelResponse);

  rpc StreamEvents(StreamEventsRequest) returns (stream common.Event);

  rpc DispatchMessage(DispatchMessageRequest) returns (DispatchMessageResponse);

  rpc Heartbeat(common.HeartbeatRequest) returns (common.HeartbeatResponse);
}
