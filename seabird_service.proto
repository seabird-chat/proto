syntax = "proto3";

option go_package = ".;pb";

import "common.proto";

package seabird_chat_router;

message JoinChannelEvent {
  string channel_name = 1;
}

message LeaveChannelEvent {
  string channel_id = 1;
}

message ChatEvent {
  oneof inner {
    common.MessageEvent text = 1;
    common.PrivateMessageEvent private_message = 2;
    common.MentionEvent mention = 3;
    common.CommandEvent command = 4;

    JoinChannelEvent join_channel = 5;
    LeaveChannelEvent leave_channel = 6;
  }
}

message RegisterRequest {
  common.Identity identity = 1;

  string name = 2;
  repeated string supported_actions = 3;

  // TODO: decide if this is worth the weirdness to
  // save the extra RPC
  repeated string initial_channels = 4;
}

message RegisterResponse {}

message RegisterChannelsRequest {
  common.Identity identity = 1;

  repeated string channel_names = 2;
}

message RegisterChannelsResponse {
  // Should the chat service maintain IDs as well?
  // It'd be more convenient for Core to not maintain
  // mappings of names to IDs and push that down
  // to the chat service, but the downside is that
  // then the chat service needs to keep a consistent
  // map of the IDs as well, which need to be kept in-
  // sync with Core.
  //
  // Instead, we could make Core and plugins the only
  // things that know about IDs, and then Core would
  // take IDs from plugins and switch them out
  // for the channel names that services know about.
  // More work for core, but much more convenient for
  // chat services. I believe that the IDs are still
  // necessary as otherwise you couldn't have either
  // (a) multiple services with the same channel names
  // without exposing the service ID as well, or more
  // importantly (b) two instances of the same service
  // (two Discord servers for example) with the same
  // channel names in each. Technically you could
  // also get around that by populating server IDs in
  // each request, but that seems a bit dirty API-wise.
  repeated common.Channel channels = 1;
}

message DeregisterChannelsRequest {
  common.Identity identity = 1;

  repeated string channel_ids = 2;
}

message DeregisterChannelsResponse {}

message StreamEventsRequest {
  common.Identity identity = 1;
}

message DispatchMessageRequest {
  common.Identity identity = 1;

  string source_channel_id = 2;
  string text = 3;
}

message DispatchMessageResponse {}

// This service is exposed separately to the chat frontend. Its purpose
// is to allow multiple different chat backends to register to Core
// and allow plugins to communicate with them.
service SeabirdChatRouter {
  rpc Register(RegisterRequest) returns (RegisterResponse);

  // Core needs to know each channel ID, so chat services must register
  // and deregister channels
  rpc RegisterChannels(RegisterChannelRequest) returns (RegisterChannelResponse);
  rpc DeregisterChannels(DeregisterChannelRequest) returns (DeregisterChannelResponse);

  rpc StreamEvents(StreamEventsRequest) returns (stream ChatEvent);

  rpc DispatchMessage(DispatchMessageRequest) returns (DispatchMessageResponse);
}
